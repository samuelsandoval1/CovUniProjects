# Recall: cbind is bind into columns
#         rbind is bind into rows
a = cbind(c(1,0))
b = cbind(c(0,1))
flag = rbind(c(0, 0, 1, 1, 0),
c(0, 2, 2, 1, 1))
# This flag is just 5 points:
#   (0,0), (0,2), (1,2), (1,1), (0,1)
# that will be plotted with line segments
# joining consecutive points.
# Setup square plotting region (old-school R)
# and set the axis limits
par(pty="s")
plot(0,0,xlim=c(-2,2),ylim=c(-2,2))
grid()
# Draw red/green vectors and blue flag
#arrows(0,0,a[1],a[2],col='red',lwd=7)
#arrows(0,0,b[1],b[2],col='green',lwd=7)
lines(flag[1,],flag[2,],col='blue')
#####
# Select which example matrix to use
example = 1
if (example==1) {
# Example 1.  Rotate 90 degrees anticlockwise
M = cbind(c(1,0),c(1,0))
} else if (example==2) {
# Example 2.  Reflection in y-axis
M = cbind(c(-1,0),c(0,1))
} else if (example==3) {
# Example 3.  Rotation 180 degrees
M = cbind(c(-1,0),c(0,-1))
} else if (example==4) {
# Example 4.  Reflection in x-axis
M = cbind(c(1,0),c(0,-1))
} else if (example==5) {
# Example 5.  Rotation 270 degrees anticlockwise
M = cbind(c(0,-1),c(1,0))
} else if (example==6) {
# Example 6.  Reflection in mirror line y=x
M = cbind(c(0,1),c(1,0))
} else if (example==7) {
# Example 7.  Rotate anticlockwise by degrees
#
# -- try some different angles (in degrees)
#
degrees = 135
theta = (degrees/360)*(2*pi)
M = cbind(c( cos(theta), sin(theta)),
c(-sin(theta), cos(theta)))
} else if (example==8) {
# Example 8.  Reflect in mirror line
#
# -- try some different angles (in degrees)
#
degrees = 135  # angle of mirror line
theta = 2*(degrees/360)*(2*pi)
M = cbind(c( cos(theta), sin(theta)),
c( sin(theta),-cos(theta)))
} else if (example==9) {
# Exercise
# Scaling matrix (diagonal matrix)
#
# ... put your code here ...
#
M = cbind(c(1,0),c(0,1))
} else if (example==10) {
# Exercise
# Shear matrix (upper or lower triangular matrix)
#
# ... put your code here ...
#
magic = -0.5
M = cbind(c(1,0),c(magic,1))
}
# Display the matrix chosen
M
# Transform the vectors and flag
newa = M %*% a
newb = M %*% b
newflag = M %*% flag
# Draw red/green transformed vectors and transformed blue flag
# as dashed (linetype: lty=2) arrows/lines
# [http://www.sthda.com/english/wiki/line-types-in-r-lty]
lines(newflag[1,],newflag[2,],col='blue',lty=2)
#arrows(0,0,newa[1],newa[2],col='red',lwd=3,lty=2)
#arrows(0,0,newb[1],newb[2],col='green',lwd=3,lty=2)
# -- the end --
#----------------------------------------
# Lab 10a
# Visualisation of Matrix Transformations
#----------------------------------------
# Idea: We use a matrix to represent a transformation
#       (see lectures from Week 10)
# Recall: cbind is bind into columns
#         rbind is bind into rows
a = cbind(c(1,0))
b = cbind(c(0,1))
flag = rbind(c(0, 0, 1, 1, 0),
c(0, 2, 2, 1, 1))
# This flag is just 5 points:
#   (0,0), (0,2), (1,2), (1,1), (0,1)
# that will be plotted with line segments
# joining consecutive points.
# Setup square plotting region (old-school R)
# and set the axis limits
par(pty="s")
plot(0,0,xlim=c(-2,2),ylim=c(-2,2))
grid()
# Draw red/green vectors and blue flag
#arrows(0,0,a[1],a[2],col='red',lwd=7)
#arrows(0,0,b[1],b[2],col='green',lwd=7)
lines(flag[1,],flag[2,],col='blue')
#####
# Select which example matrix to use
example = 3
if (example==1) {
# Example 1.  Rotate 90 degrees anticlockwise
M = cbind(c(1,0),c(1,0))
} else if (example==2) {
# Example 2.  Reflection in y-axis
M = cbind(c(-1,0),c(0,1))
} else if (example==3) {
# Example 3.  Rotation 180 degrees
M = cbind(c(-1,0),c(0,-1))
} else if (example==4) {
# Example 4.  Reflection in x-axis
M = cbind(c(1,0),c(0,-1))
} else if (example==5) {
# Example 5.  Rotation 270 degrees anticlockwise
M = cbind(c(0,-1),c(1,0))
} else if (example==6) {
# Example 6.  Reflection in mirror line y=x
M = cbind(c(0,1),c(1,0))
} else if (example==7) {
# Example 7.  Rotate anticlockwise by degrees
#
# -- try some different angles (in degrees)
#
degrees = 135
theta = (degrees/360)*(2*pi)
M = cbind(c( cos(theta), sin(theta)),
c(-sin(theta), cos(theta)))
} else if (example==8) {
# Example 8.  Reflect in mirror line
#
# -- try some different angles (in degrees)
#
degrees = 135  # angle of mirror line
theta = 2*(degrees/360)*(2*pi)
M = cbind(c( cos(theta), sin(theta)),
c( sin(theta),-cos(theta)))
} else if (example==9) {
# Exercise
# Scaling matrix (diagonal matrix)
#
# ... put your code here ...
#
M = cbind(c(1,0),c(0,1))
} else if (example==10) {
# Exercise
# Shear matrix (upper or lower triangular matrix)
#
# ... put your code here ...
#
magic = -0.5
M = cbind(c(1,0),c(magic,1))
}
# Display the matrix chosen
M
# Transform the vectors and flag
newa = M %*% a
newb = M %*% b
newflag = M %*% flag
# Draw red/green transformed vectors and transformed blue flag
# as dashed (linetype: lty=2) arrows/lines
# [http://www.sthda.com/english/wiki/line-types-in-r-lty]
lines(newflag[1,],newflag[2,],col='blue',lty=2)
#arrows(0,0,newa[1],newa[2],col='red',lwd=3,lty=2)
#arrows(0,0,newb[1],newb[2],col='green',lwd=3,lty=2)
# -- the end --
# summary table
flying %>%
filter(recline_frequency == "Never" | recline_frequency == "Once in a while")%>%
group_by(recline_rude) %>%
summarise(count=n())
fruit
distinct(fruit,country)
spain = filter(fruit, country=='Spain')
uk = filter(fruit, country=='UK')
select(uk,item) %>% unique()
select(spain,item) %>% unique()
select(fruit,item) %>% unique()
distinct(fruit,country)
uk
spain = filter(fruit, country=='Spain') %>% select(item)
spain
spain = filter(fruit, country=='Spain') %>% select(item)  %>% unique()
spain
spain = filter(fruit, country=='Spain') %>% select(item)
uk = filter(fruit, country=='UK') %>% select(item)
intersect(spain,uk)
spain = filter(fruit, country=='Spain') %>% select(item) %>% unique()
uk = filter(fruit, country=='UK') %>% select(item)  %>% unique()
intersect(spain,uk)
union(spain,uk)
setdiff(spain,uk)
fruit %>%
filter(  box A  ) %>%
ggplot(aes(x=  box B  , y=  box C  , colour=  box D  )) +
geom_line()
fruit %>%
filter(item=='Strawberries') %>%
ggplot(aes(x=year , y=yield, colour=country )) +
geom_line()
# summary table, 2019
fruit
fruit %>%
filter(item=='2019') %>%
summarise(count=n())
fruit %>%
filter(year=='2019') %>%
summarise(count=n())
# summary table, 2019
fruit %>%
filter(year=='2019') %>%
group_by(country) %>%
summarise(count=n())
# summary table, 2019
fruit %>%
filter(year=='2019') %>%
group_by(fruit) %>%
summarise(area=n())
# summary table, 2019
fruit %>%
filter(year=='2019') %>%
group_by(item) %>%
summarise(area=n())
# summary table, 2019
fruit %>%
filter(year=='2019') %>%
group_by(item) %>%
summarise(count=n())
# summary table, 2019
fruit %>%
filter(year=='2019') %>%
group_by(item) %>%
summarise(area=n())
fruit %>%
filter(year=='2019') %>%
group_by(item) %>%
summarise(count=area())
fruit %>%
filter(year==2019) %>%
group_by(item) %>%
summarise(sum=)
fruit %>%
filter(year==2019) %>%
group_by(item) %>%
summarise(sum(area))
fruit %>%
filter(year==2019) %>%
group_by(item) %>%
summarise(total_area = sum(area))
flying %>%
filter(recline_frequency == "Never" | recline_frequency == "Once in a while")%>%
group_by(recline_rude) %>%
summarise(count=n())
debugSource("~/Projects/Data_Science/Labs/testPrepScript.R", echo=TRUE)
flying = read_csv('../Data/flying.csv')
nrow(flying)
ncol(flying)
# bar chart
ggplot(flying,mapping=aes(x=frequency)) +
geom_bar()+
coord_flip() +
ggtitle("Frequency ppl travel by plane")
# summary table
flying %>%
filter(recline_frequency == "Never" | recline_frequency == "Once in a while")%>%
group_by(recline_rude) %>%
summarise(count=n())
#recline_rude
#recline_frequency
flying
View(flying)
flying %>%
filter(children_under_18,baby ) %>%
flying %>%
select(children_under_18,baby) %>%
drop_na()
flying = read_csv('../Data/flying.csv')
flying
flying %>%
select(baby,children_under_18) %>%
drop_na()
ggplot(aes(x=children_under_18, fill=baby)) +
geom_bar() +
gg_title('Is it rude to bring a baby on the plane?')
flying %>%
select(baby,children_under_18) %>%
drop_nan()%>%
ggplot(aes(x=children_under_18, fill=baby)) +
geom_bar() +
gg_title('
flying %>%
select(baby,children_under_18) %>%
drop_nan()%>%
ggplot(aes(x=children_under_18, fill=baby)) +
geom_bar() +
gg_title('Is it rude to bring a baby on the plane?')
flying %>%
select(baby,children_under_18) %>%
drop_nan()%>%
ggplot(aes(x=children_under_18, fill=baby)) +
geom_bar() +
gg_title("Is it rude to bring a baby on the plane?")
flying %>%
select(baby,children_under_18) %>%
drop_na()%>%
ggplot(aes(x=children_under_18, fill=baby)) +
geom_bar() +
gg_title("Is it rude to bring a baby on the plane?")
flying %>%
select(baby,children_under_18) %>%
drop_na()%>%
ggplot(aes(x=children_under_18, fill=baby)) +
geom_bar() +
ggtitle("Is it rude to bring a baby on the plane?")
ggplot(aes(x=children_under_18, fill=baby)) +
geom_bar() +
ggtitle("Is it rude to bring a baby on the plane?")
# Code part of April Phase test
library(tidyverse)
debugSource("~/Projects/Data_Science/Labs/testPrepScript.R", echo=TRUE)
# bank.csv
bank = read_csv('../Data/bank.csv')
bank
library(tidyverse)
library(datarium)
marketing = as_tibble(marketing)
marketing
ggplot(data=marketing,aes(x=youtube,y=sales)) +
geom_point()
x = marketing$youtube
y = marketing$sales
# Model is y = a + b*x
model = lm(y~x)
summary(model)
a = model$coefficients[1]
b = model$coefficients[2]
a
b
# Model is sales = a + b*youtube
ggplot(marketing,aes(x=youtube,y=sales)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
model = lm(sales~youtube, data=marketing)
summary(model)
x = bank$salary
y = bank$service
# Model is y = a + b*x
model = lm(y~x)
summary(model)
a = model$coefficients[1]
b = model$coefficients[2]
a
b
x = bank$salary
y = bank$service
# Model is y = a + b*x
model = lm(y~x)
summary(model)
a = model$coefficients[1]
b = model$coefficients[2]
a
b
# Linear model: ùë¶ = (-12.14951) + (0.001702317) √ó ùë•
# Exercise. Calculate the correlation coefficient between sales and youtube.
# (this is below here)
# Model is sales = a + b*youtube
ggplot(bank,aes(x=salary,y=service)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
model = lm(salary~service, data=bank)
summary(model)
lying = read_csv('../Data/flying.csv')
flying
nrow(flying)
ncol(flying)
# bar chart
ggplot(flying,mapping=aes(x=frequency)) +
geom_bar()+
coord_flip() +
ggtitle("Frequency ppl travel by plane")
# summary table
flying %>%
filter(recline_frequency == "Never" | recline_frequency == "Once in a while")%>%
group_by(recline_rude) %>%
summarise(count=n())
#recline_rude
#recline_frequency
#children_under_18
#baby
flying %>%
select(baby,children_under_18) %>%
drop_na()%>%
ggplot(aes(x=children_under_18, fill=baby)) +
geom_bar() +
ggtitle("Is it rude to bring a baby on the plane?")
bank = read_csv('../Data/bank.csv')
# salary~service
# lm() used for linear model
x = bank$salary
y = bank$service
# Model is y = a + b*x
model = lm(y~x)
summary(model)
a = model$coefficients[1]
b = model$coefficients[2]
a
b
# Linear model: ùë¶ = (-12.14951) + (0.001702317) √ó ùë•
# Exercise. Calculate the correlation coefficient between sales and youtube.
# (this is below here)
# Model is sales = a + b*youtube
ggplot(bank,aes(x=salary,y=service)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
model = lm(salary~service, data=bank)
summary(model)
ggplot(marketing,aes(x=youtube,y=sales)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
model = lm(sales~youtube, data=marketing)
summary(model)
ggplot(bank,aes(x=salary,y=service)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
model = lm(salary~service, data=bank)
summary(model)
# use salary and size to predict sales
ggplot(bank,aes(x=salary,y=service)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
model = lm(salary~service+size, data=bank)
summary(model)
ggplot(bank,aes(x=salary,y=service)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
model = lm(salary~service, data=bank)
summary(model)
# Code part of April Phase test
library(tidyverse)
cycle = read_csv('../Data/cycling.csv')
model = lm(cycletowork~age25to34)
cycle
model = lm(cycletowork~age25to34)
model = lm(cycletowork~age25to34)
model = lm(cycletowork~age25to34, data=cycle)
summary(model)
ggplot(cycle, aes(x=age25to35,y=cycletowork)) +
geom_point()
geom_smooth(method=lm, se=FALSE)
model = lm(cycletowork~age25to34, data=cycle)
summary(model)
ggplot(cycle, aes(x=age25to34,y=cycletowork)) +
geom_point()
geom_smooth(method=lm, se=FALSE)
model = lm(cycletowork~age25to34, data=cycle)
summary(model)
ggplot(cycle, aes(x=age25to34,y=cycletowork)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
autoplot(model)
library(tidyverse)
library(ggfortify)
autoplot(model)
gc()
model = lm(cycletowork~age25to34+travel10to20km, data=cycle)
summary(model)
model = lm(cycletowork~age25to34, data=cycle)
summary(model)
autoplot(model)
# Question 5 April
M = cbind(c(1,1),c(-1,1))
M = cbind(c(1,1),c(-1,1))
flag = rbind(c(0, 0, 1, 1, 0),
c(0, 2, 2, 1, 1))
newflag = M %*% flag
lines(newflag[1,],newflag[2,],col='blue',lty=2)
M = cbind(c(1,1),c(-1,1))
flag = rbind(c(0, 0, 1, 1, 0),
c(0, 2, 2, 1, 1))
lines(flag[1,],flag[2,],col='blue')
M = cbind(c(1,1),c(-1,1))
flag = rbind(c(0, 0, 1, 1, 0),
c(0, 2, 2, 1, 1))
par(pty="s")
plot(0,0,xlim=c(-2,2),ylim=c(-2,2))
grid()
lines(flag[1,],flag[2,],col='blue')
newflag = M %*% flag
lines(newflag[1,],newflag[2,],col='blue',lty=2)
flag = rbind(c(0, 0, 1, 1, 0),
c(0, 2, 2, 1, 1))
par(pty="s")
plot(0,0,xlim=c(-2,2),ylim=c(-3,3))
grid()
lines(flag[1,],flag[2,],col='blue')
M = cbind(c(1,1),c(-1,1))
newflag = M %*% flag
lines(newflag[1,],newflag[2,],col='blue',lty=2)
